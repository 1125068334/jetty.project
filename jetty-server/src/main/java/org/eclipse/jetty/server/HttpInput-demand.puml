@startuml
title "HttpInput"

participant Connection as "\nConnection\n"
participant HttpChannel as "Http\nChannel\n"
participant HttpChannelState as "Http\nChannel\nState"
participant Semaphore as "\nSemaphore\n"
participant ContentProducer as "Content\nProducer\n"
participant HttpInput as "Http\nInput\n"
participant Application as "\nApplication\n"

autoactivate on

== Blocking Read ==

note over HttpChannelState
IDLE
end note
Application->HttpInput: read
activate Application
loop while nothing read
    HttpInput->ContentProducer: read(true)
    ContentProducer->HttpChannel: demand(true)
    HttpChannel->HttpChannelState: onDemand(true)
    note over HttpChannelState
    IDLE->BLOCKING
    end note
    return
    HttpChannel->Connection: demand(1)
    alt content
    else content available
        Connection->HttpChannel: onContent
        HttpChannel->ContentProducer: addRawContent
        return
        HttpChannel->HttpChannelState: onRawContent
        note over HttpChannelState
        BLOCKING->CONTENT
        end note
        HttpChannelState->Semaphore: release
        return
        return
        return
    end
    return
    return
    ContentProducer->HttpChannelState: blockForContent
    alt inputState
    else BLOCKING
        HttpChannelState->Semaphore: acquire
        ...
        Connection->HttpChannel: onContent
        activate Connection
        HttpChannel->ContentProducer: addRawContent
        return
        HttpChannel->HttpChannelState: onRawContent
        note over HttpChannelState
        BLOCKING->CONTENT
        end note
        HttpChannelState->Semaphore: release
        return 
        return 
        return 
        deactivate Connection
        return   
    else CONTENT
        HttpChannelState->Semaphore: acquire
        return
    end
    note over HttpChannelState
    CONTENT->IDLE
    end note
    return
    return
    HttpInput->ContentProducer: read
    ContentProducer->ContentProducer: nextContent
    note over ContentProducer
    Translate
    and/or
    consume
    raw content
    end note
    return
    return
end
return
deactivate Application


...

newpage
== Async Read ==
note over HttpChannelState
IDLE
end note
Application->HttpInput: setRead\nListener
activate Application
HttpInput->ContentProducer: available
loop while rawContent && !content
    ContentProducer->HttpChannel: demand(false)
    HttpChannel->HttpChannelState: onDemand(false)
    note over HttpChannelState
    IDLE->DEMANDING
    end note
    return
    HttpChannel->Connection: demand(1)
    alt content available
        Connection->HttpChannel: onContent
        HttpChannel->ContentProducer: addRawContent
        return
        HttpChannel->HttpChannelState: onRawContent
        note over HttpChannelState
        DEMANDING->CONTENT
        end note
        return
        return
    end
    return
    return
    ContentProducer->ContentProducer: nextContent
    note over ContentProducer
    Translate
    and/or
    consume
    raw content
    end note
    return
end
return
alt available && inputState
else available==0 && DEMANDING
    HttpInput->HttpChannelState: onReadUnready
    note over HttpChannelState
    DEMANDING->UNREADY
    end note
    return
else available==0 && CONTENT
    Connection->HttpChannel: onContent
    activate Connection
    HttpChannel->ContentProducer: addRawContent
    return
    HttpChannel->HttpChannelState: onRawContent
    note over HttpChannelState
    DEMANDING->READY
    end note
    return 
    return 
    deactivate Connection

    HttpInput->HttpChannelState: onReadUnready
    note over HttpChannelState
    Already READY!
    end note
    return
else available!=0 || isError
    HttpInput->HttpChannelState: onReadReady
    note over HttpChannelState
    READY
    end note
    return
end
return
deactivate Application

alt
    ...
    Connection->HttpChannel: onContent
    activate Connection
    HttpChannel->ContentProducer: addRawContent
    return
    HttpChannel->HttpChannelState: onRawContent
    note over HttpChannelState
    UNREADY->READY
    end note
    return 
    return 
    deactivate Connection
end

[->HttpChannel: handle
loop
    HttpChannel->HttpChannelState: nextAction
    return
    alt action from inputState
    else inputState==READY
        note over HttpChannelState
        READY->IDLE
        end note

        HttpChannel->HttpInput: isReady
        HttpInput->ContentProducer: available
        loop while rawContent && !content
            ContentProducer->ContentProducer: nextContent
            note over HttpChannel, ContentProducer
            Only if raw content consumed do demand.
            See isReady example below.
            end note
            note over ContentProducer
            Translate
            and/or
            consume
            raw content
            end note
            return
        end
        return

        return

        alt isReady()==true
            HttpChannel->Application: onDataAvailable
            loop while (isReady())
                Application->HttpInput: isReady
                note over HttpInput
                same as isReady above
                end note


                HttpInput->ContentProducer: available
                loop while rawContent && !content
                    ContentProducer->HttpChannel: demand(false)
                    HttpChannel->HttpChannelState: onDemand(false)
                    note over HttpChannelState
                    IDLE->DEMANDING
                    end note
                    return
                    HttpChannel->Connection: demand(1)
                    alt content available
                        Connection->HttpChannel: onContent
                        HttpChannel->ContentProducer: addRawContent
                        return
                        HttpChannel->HttpChannelState: onRawContent
                        note over HttpChannelState
                        DEMANDING->CONTENT
                        end note
                        return
                        return
                    end
                    return
                    return
                    ContentProducer->ContentProducer: nextContent
                    note over ContentProducer
                    Translate
                    and/or
                    consume
                    raw content
                    end note
                    return
                end
                return


                return
                Alt isReady()==true
                    Application->HttpInput: read
                    HttpInput->ContentProducer: read
                    return
                    return
                end
            end
            return
        end
    end
end
return



@enduml
