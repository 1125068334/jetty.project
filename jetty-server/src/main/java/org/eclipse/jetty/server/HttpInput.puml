@startuml
title "HttpInput"

participant Connection as "\nConnection\n"
participant HttpChannel as "Http\nChannel\n"
participant HttpChannelState as "Http\nChannel\nState"
participant Semaphore as "\nSemaphore\n"
participant ContentProducer as "Content\nProducer\n"
participant HttpInput as "Http\nInput\n"
participant Application as "\nApplication\n"

autoactivate on

note over HttpChannelState
The nextContent method is shown on HttpChannelState. This has only
been done for clarity of the diagram and the actual method would
most likely be in ContentProducer
end note
== Blocking Read ==

Application->HttpInput: read
activate Application
HttpInput->ContentProducer: nextNon\nNullContent\n(BLOCK)
    loop for non null content
        ContentProducer->HttpChannelState: nextContent(BLOCK)
            loop for exiting inputState
                alt inputState
                else IDLE
                    note over HttpChannelState
                    IDLE->PRODUCING
                    end note
                    HttpChannelState->HttpChannel: produceContent
                        alt implementation
                        else HTTP1
                            HttpChannel->Connection: fillAndParse
                                alt Content available
                                    Connection->HttpChannel: addContent
                                        HttpChannel->HttpChannelState: onContent
                                            note over HttpChannelState
                                            PRODUCING->READY
                                            remember content
                                            end note
                                        return
                                    return
                                end
                            return
                            ...
                        else HTTP2
                            alt if not already demanding
                                HttpChannel->Connection: demand(1)
                                    alt Content available or any time after
                                        Connection->HttpChannel: onData
                                            HttpChannel->HttpChannelState: onContent
                                                note over HttpChannelState
                                                PRODUCING->READY
                                                remember content
                                                end note
                                            return
                                        return
                                    end
                                return
                            end
                        end
                    return
                    ...
                else PRODUCING
                    note over HttpChannelState
                    PRODUCING->BLOCKING
                    end note

                    HttpChannelState->HttpChannel: needContent
                        alt implementation
                        else HTTP1
                            HttpChannel->Connection: fillInterest
                                note over HttpChannel
                                    onFillable below could happen in this scope
                                    or any time from now
                                end note
                            return
                            ...
                        else HTTP2
                            alt if not already demanding
                                HttpChannel->Connection: demand(1)
                                    note over HttpChannel
                                        onData below could already have
                                        been called, could happen in this scope
                                        or any time from now
                                    end note
                                return
                            end
                        end
                    return

                    HttpChannelState->Semaphore: acquire
                        ... waiting for input ...
                        alt implementation
                        else HTTP1
                            Connection->HttpChannel: onFillable
                            activate Connection
                                HttpChannel->HttpChannelState: onWakeup
                                    note over HttpChannelState
                                    BLOCKING->IDLE
                                    end note
                                    HttpChannelState->Semaphore:release
                                    return
                                return false
                            return false
                            deactivate Connection
                            ...
                        else HTTP2
                            Connection->HttpChannel: onData
                            activate Connection
                                HttpChannel->HttpChannelState: onContent
                                        note over HttpChannelState
                                        BLOCKING->READY
                                        remember content
                                        end note
                                        HttpChannelState->Semaphore:release
                                        return
                                    return false
                            return false
                            deactivate Connection
                        end
                    return
                ...
                else READY
                        note over HttpChannelState
                        READY->IDLE
                        end note
                    return content
                end
                note over HttpChannelState
                loop around to handle next state
                end note
            end
            ContentProducer->ContentProducer: transform
            return
            |||
        alt if content
            return content
        end
    end
return content.read
deactivate Application
|||
...

newpage
== Available ==

Application->HttpInput: available
activate Application
HttpInput->ContentProducer: nextNon\nNullContent\n(POLL)
    loop for non null content
        ContentProducer->HttpChannelState: nextContent(POLL)
            loop until exiting inputState
                alt inputState
                else UNREADY
                    autoactivate off
                    HttpChannelState-->ContentProducer: null
                    autoactivate on
                    ...
                else READY
                    note over HttpChannelState
                    READY->IDLE
                    end note
                    autoactivate off
                    HttpChannelState->ContentProducer: content
                    autoactivate on
                    ...
                else IDLE
                    note over HttpChannelState
                    IDLE->PRODUCING
                    end note
                    HttpChannelState->HttpChannel: produceContent
                        alt implementation
                        else HTTP1
                            HttpChannel->Connection: fillAndParse
                                alt Content available
                                    Connection->HttpChannel: addContent
                                        HttpChannel->HttpChannelState: onContent
                                            note over HttpChannelState
                                            PRODUCING->READY
                                            remember content
                                            end note
                                        return
                                    return
                                end
                            return
                            ...
                        else HTTP2
                            alt if not already demanding
                                HttpChannel->Connection: demand(1)
                                    alt Content available or any time after
                                        Connection->HttpChannel: onData
                                            HttpChannel->HttpChannelState: onContent
                                                note over HttpChannelState
                                                PRODUCING->READY
                                                remember content
                                                end note
                                            return
                                        return
                                    end
                                return
                            end
                        end
                    return
                    ...
                else PRODUCING
                    note over HttpChannelState
                    PRODUCING->IDLE
                    end note
                    autoactivate off
                    HttpChannelState->ContentProducer: null
                    deactivate HttpChannelState
                    autoactivate on
                    ...
                end

            note over HttpChannelState
            loop around to handle next state
            end note
        end
        ContentProducer->ContentProducer: transform
        return
        |||
        alt if content==null\n||content.size!=0
            return content
        end
    end
return content==null\n?0\n:content.size
deactivate Application

|||
...

newpage

== Async Read ==


[->HttpChannel: handle
    loop
        alt inputState=>action
        ...
        else READY=>ASYNC_READ
            HttpChannel->HttpInput:isReady
                note over HttpInput
                    see below
                end note
            return
            alt isReady
            else true
                HttpChannel->Application:onDataAvailable
                    note left of Application
                    calls to isReady and read
                    may be made in this scope or by
                    other threads at any time.
                    see below.
                    end note
                return
            end
        end
        ...
    end
return


Application->HttpInput: isReady
activate Application
HttpInput->ContentProducer: nextNon\nNullContent\n(ASYNC)
    loop for non null content
        ContentProducer->HttpChannelState: nextContent(ASYNC)
            loop for exiting inputState
                alt inputState
                else UNREADY
                    autoactivate off
                    HttpChannelState-->ContentProducer: null
                    autoactivate on
                    ...
                else IDLE
                    note over HttpChannelState
                    IDLE->PRODUCING
                    end note
                    HttpChannelState->HttpChannel: produceContent
                        alt implementation
                        else HTTP1
                            HttpChannel->Connection: fillAndParse
                                alt Content available
                                    Connection->HttpChannel: addContent
                                        HttpChannel->HttpChannelState: onContent
                                            note over HttpChannelState
                                            PRODUCING->READY
                                            remember content
                                            end note
                                        return
                                    return
                                end
                            return
                            ...
                        else HTTP2
                            alt if not already demanding
                                HttpChannel->Connection: demand(1)
                                    alt Content available or any time after
                                        Connection->HttpChannel: onData
                                            HttpChannel->HttpChannelState: onContent
                                                note over HttpChannelState
                                                PRODUCING->READY
                                                remember content
                                                end note
                                            return
                                        return
                                    end
                                return
                            end
                        end
                    return
                    ...
                else PRODUCING
                    note over HttpChannelState
                    PRODUCING->UNREADY
                    end note

                    HttpChannelState->HttpChannel: needContent
                        alt implementation
                        else HTTP1
                            HttpChannel->Connection: fillInterest
                                note over HttpChannel
                                    onFillable below could happen in this scope
                                    or any time from now
                                end note
                            return
                            ...
                        else HTTP2
                            alt if not already demanding
                                HttpChannel->Connection: demand(1)
                                    note over HttpChannel
                                        onData below could already have
                                        been called, could happen in this scope
                                        or any time from now
                                    end note
                                return
                            end
                        end
                    return
                    ...
                else READY
                    note over HttpChannelState
                    READY->IDLE
                    end note
                    autoactivate off
                    HttpChannelState->ContentProducer: content
                    deactivate HttpChannelState
                    autoactivate on
                    ...
                end
                note over HttpChannelState
                loop around to handle next state
                end note

             end
            ContentProducer->ContentProducer: translate
            return
        alt
        else content == null \n|| content.size()>0
            autoactivate off
            ContentProducer-->HttpInput: content
            deactivate ContentProducer
            autoactivate on
        end
    end
return content==null\n?false\n:true
deactivate Application

alt if content arrives
    note right of Connection
        this may happen during isReady above or after.
        State will probably be UNREADY, but may also
        be IDLE or even PRODUCING in some circumstances
        Those other states will be handled as per
        examples above.
    end note
    alt implementation
    else HTTP1
        Connection->HttpChannel: onFillable
        activate Connection
            HttpChannel->HttpChannelState: onWakeup
                note over HttpChannelState
                UNREADY->IDLE
                end note
            return woken
        return woken
        deactivate Connection
        ...
    else HTTP2
        Connection->HttpChannel: onData
        activate Connection
            HttpChannel->HttpChannelState: onContent
                    note over HttpChannelState
                    UNREADY->READY
                    remember content
                    end note
                return woken
        return woken
        deactivate Connection
    end
end


Application->HttpInput: read
activate Application
    HttpInput->ContentProducer: read
        return content==null\n?ISE\n:content.read
    return
deactivate Application

|||

@enduml
